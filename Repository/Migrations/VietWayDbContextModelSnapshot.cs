// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VietWay.Repository.DataAccessObject;

#nullable disable

namespace VietWay.Repository.Migrations
{
    [DbContext(typeof(VietWayDbContext))]
    partial class VietWayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VietWay.Repository.EntityModel.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Attraction", b =>
                {
                    b.Property<string>("AttractionId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AttractionCategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GooglePlaceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProvinceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("AttractionId");

                    b.HasIndex("AttractionCategoryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Attraction");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionCategory", b =>
                {
                    b.Property<string>("AttractionCategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AttractionCategoryId");

                    b.ToTable("AttractionCategory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AttractionId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("ImageId");

                    b.HasIndex("AttractionId");

                    b.ToTable("AttractionImage");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionSchedule", b =>
                {
                    b.Property<string>("TourTemplateId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("AttractionId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TourTemplateId", "DayNumber", "AttractionId");

                    b.HasIndex("AttractionId");

                    b.ToTable("AttractionSchedule");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Booking", b =>
                {
                    b.Property<string>("BookingId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ContactAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("ContactFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TourId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.BookingPayment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookingId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PayTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ThirdPartyTransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingPayment");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.BookingTourParticipant", b =>
                {
                    b.Property<string>("ParticipantId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool?>("HasAttended")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TourBookingId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ParticipantId");

                    b.HasIndex("TourBookingId");

                    b.ToTable("BookingTourParticipant");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.EntityHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ModifierRole")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EntityHistory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.EntityStatusHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NewStatus")
                        .HasColumnType("int");

                    b.Property<int>("OldStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EntityStatusHistory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.EventCategory", b =>
                {
                    b.Property<string>("EventCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventCategoryId");

                    b.ToTable("EventCategory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BookingId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Manager", b =>
                {
                    b.Property<string>("ManagerId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ManagerId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Post", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.PostCategory", b =>
                {
                    b.Property<string>("PostCategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostCategoryId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Province", b =>
                {
                    b.Property<string>("ProvinceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Staff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Tour", b =>
                {
                    b.Property<string>("TourId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentParticipant")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxParticipant")
                        .HasColumnType("int");

                    b.Property<int?>("MinParticipant")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartLocation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TourTemplateId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TourId");

                    b.HasIndex("TourTemplateId");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourCategory", b =>
                {
                    b.Property<string>("TourCategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TourCategoryId");

                    b.ToTable("TourCategory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourDuration", b =>
                {
                    b.Property<string>("DurationId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DurationName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfDay")
                        .HasColumnType("int");

                    b.HasKey("DurationId");

                    b.ToTable("TourDuration");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplate", b =>
                {
                    b.Property<string>("TourTemplateId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DurationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TourCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("TourTemplateId");

                    b.HasIndex("DurationId");

                    b.HasIndex("TourCategoryId");

                    b.ToTable("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateImage", b =>
                {
                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("TourTemplateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ImageId");

                    b.HasIndex("TourTemplateId");

                    b.ToTable("TourTemplateImage");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateProvince", b =>
                {
                    b.Property<string>("TourTemplateId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TourTemplateId", "ProvinceId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("TourTemplateProvince");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateSchedule", b =>
                {
                    b.Property<string>("TourTemplateId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourTemplateId", "DayNumber");

                    b.ToTable("TourTemplateSchedule");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Admin", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Attraction", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.AttractionCategory", "AttractionCategory")
                        .WithMany("Attractions")
                        .HasForeignKey("AttractionCategoryId");

                    b.HasOne("VietWay.Repository.EntityModel.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("AttractionCategory");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionImage", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Attraction", "Attraction")
                        .WithMany("AttractionImages")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionSchedule", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourTemplateSchedule", "TourTemplateSchedule")
                        .WithMany("AttractionSchedules")
                        .HasForeignKey("TourTemplateId", "DayNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("TourTemplateSchedule");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Booking", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Customer", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.Tour", "Tour")
                        .WithMany("TourBookings")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerInfo");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.BookingPayment", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Booking", "Booking")
                        .WithMany("BookingPayments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.BookingTourParticipant", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Booking", "Booking")
                        .WithMany("BookingTourParticipants")
                        .HasForeignKey("TourBookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Customer", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.EntityStatusHistory", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.EntityHistory", "EntityHistory")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityHistory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Event", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId");

                    b.HasOne("VietWay.Repository.EntityModel.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("EventCategory");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Feedback", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Booking", "Booking")
                        .WithOne("CustomerFeedback")
                        .HasForeignKey("VietWay.Repository.EntityModel.Feedback", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Manager", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Post", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.PostCategory", "PostCategory")
                        .WithMany("Posts")
                        .HasForeignKey("EventCategoryId");

                    b.HasOne("VietWay.Repository.EntityModel.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.Navigation("PostCategory");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Staff", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Tour", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.TourTemplate", "TourTemplate")
                        .WithMany("Tours")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplate", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.TourDuration", "TourDuration")
                        .WithMany()
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourCategory", "TourCategory")
                        .WithMany()
                        .HasForeignKey("TourCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourCategory");

                    b.Navigation("TourDuration");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateImage", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.TourTemplate", "TourTemplate")
                        .WithMany("TourTemplateImages")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateProvince", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourTemplate", "TourTemplate")
                        .WithMany("TourTemplateProvinces")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");

                    b.Navigation("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateSchedule", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.TourTemplate", "TourTemplate")
                        .WithMany("TourTemplateSchedules")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Attraction", b =>
                {
                    b.Navigation("AttractionImages");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionCategory", b =>
                {
                    b.Navigation("Attractions");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Booking", b =>
                {
                    b.Navigation("BookingPayments");

                    b.Navigation("BookingTourParticipants");

                    b.Navigation("CustomerFeedback");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.PostCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Tour", b =>
                {
                    b.Navigation("TourBookings");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplate", b =>
                {
                    b.Navigation("TourTemplateImages");

                    b.Navigation("TourTemplateProvinces");

                    b.Navigation("TourTemplateSchedules");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateSchedule", b =>
                {
                    b.Navigation("AttractionSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
