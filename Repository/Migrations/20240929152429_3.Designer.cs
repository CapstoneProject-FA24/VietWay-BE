// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VietWay.Repository.DataAccessObject;

#nullable disable

namespace VietWay.Repository.Migrations
{
    [DbContext(typeof(VietWayDbContext))]
    [Migration("20240929152429_3")]
    partial class _3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VietWay.Repository.EntityModel.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Admin", b =>
                {
                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Attraction", b =>
                {
                    b.Property<long>("AttractionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AttractionTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleMapUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttractionId");

                    b.HasIndex("AttractionTypeId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Attraction");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionImage", b =>
                {
                    b.Property<long>("AttractionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.HasKey("AttractionId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("AttractionImage");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionSchedule", b =>
                {
                    b.Property<long>("AttractionId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<long>("TourTemplateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TourTemplateScheduleDayNumber")
                        .HasColumnType("int");

                    b.Property<long?>("TourTemplateScheduleTourTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("AttractionId", "DayNumber");

                    b.HasIndex("TourTemplateId", "DayNumber");

                    b.HasIndex("TourTemplateScheduleTourTemplateId", "TourTemplateScheduleDayNumber");

                    b.ToTable("AttractionSchedule");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionType", b =>
                {
                    b.Property<long>("AttractionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttractionTypeId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("AttractionType");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.BookingPayment", b =>
                {
                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("BookingPayment");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.CustomerFeedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .HasColumnType("bigint");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("CustomerFeedback");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Image", b =>
                {
                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SHA256")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Manager", b =>
                {
                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ManagerId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Province", b =>
                {
                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.HasIndex("ImageId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Staff", b =>
                {
                    b.Property<long>("StaffId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StaffId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Tour", b =>
                {
                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentParticipant")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxParticipant")
                        .HasColumnType("int");

                    b.Property<int>("MinParticipant")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TourTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("TourId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TourTemplateId");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourBooking", b =>
                {
                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TourId");

                    b.ToTable("TourBooking");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourCategory", b =>
                {
                    b.Property<long>("TourCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourCategoryId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("TourCategory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplate", b =>
                {
                    b.Property<long>("TourTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TourCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourTemplateId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TourCategoryId");

                    b.ToTable("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateImage", b =>
                {
                    b.Property<long>("TourTemplateId")
                        .HasColumnType("bigint");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.HasKey("TourTemplateId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("TourTemplateImage");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateProvince", b =>
                {
                    b.Property<long>("TourTemplateId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint");

                    b.HasKey("TourTemplateId", "ProvinceId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("TourTemplateProvince");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateSchedule", b =>
                {
                    b.Property<long>("TourTemplateId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourTemplateId", "DayNumber");

                    b.ToTable("TourTemplateSchedule");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Transaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankTransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PayTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ThirdPartyTransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Admin", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Attraction", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.AttractionType", "AttractionType")
                        .WithMany("Attractions")
                        .HasForeignKey("AttractionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.Staff", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttractionType");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionImage", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Attraction", "Attraction")
                        .WithMany("AttractionImages")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionSchedule", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourTemplateSchedule", null)
                        .WithMany()
                        .HasForeignKey("TourTemplateId", "DayNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourTemplateSchedule", null)
                        .WithMany("AttractionSchedules")
                        .HasForeignKey("TourTemplateScheduleTourTemplateId", "TourTemplateScheduleDayNumber")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attraction");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionType", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Manager", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.BookingPayment", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.TourBooking", "TourBooking")
                        .WithOne("BookingPayment")
                        .HasForeignKey("VietWay.Repository.EntityModel.BookingPayment", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourBooking");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Customer", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.CustomerFeedback", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.TourBooking", "Booking")
                        .WithOne("CustomerFeedback")
                        .HasForeignKey("VietWay.Repository.EntityModel.CustomerFeedback", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Manager", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Admin", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Province", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Staff", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Manager", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Tour", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Staff", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourTemplate", "TourTemplate")
                        .WithMany("Tours")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourBooking", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Customer", "CustomerInfo")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerInfo");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourCategory", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Manager", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplate", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Staff", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourCategory", "TourCategory")
                        .WithMany()
                        .HasForeignKey("TourCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("TourCategory");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateImage", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourTemplate", "TourTemplate")
                        .WithMany("TourTemplateImages")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateProvince", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VietWay.Repository.EntityModel.TourTemplate", "TourTemplate")
                        .WithMany("TourTemplateProvinces")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");

                    b.Navigation("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateSchedule", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.TourTemplate", "TourTemplate")
                        .WithMany("TourTemplateSchedules")
                        .HasForeignKey("TourTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TourTemplate");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Transaction", b =>
                {
                    b.HasOne("VietWay.Repository.EntityModel.BookingPayment", "BookingPayment")
                        .WithMany("Transaction")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookingPayment");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Attraction", b =>
                {
                    b.Navigation("AttractionImages");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.AttractionType", b =>
                {
                    b.Navigation("Attractions");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.BookingPayment", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.Tour", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourBooking", b =>
                {
                    b.Navigation("BookingPayment");

                    b.Navigation("CustomerFeedback");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplate", b =>
                {
                    b.Navigation("TourTemplateImages");

                    b.Navigation("TourTemplateProvinces");

                    b.Navigation("TourTemplateSchedules");

                    b.Navigation("Tours");
                });

            modelBuilder.Entity("VietWay.Repository.EntityModel.TourTemplateSchedule", b =>
                {
                    b.Navigation("AttractionSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
